
# Define the stages
stages:
  - build
  - deploy_preview
  - deploy_production

# Build the project and prepare for deployment
build:
  stage: build
  script:
    - echo "Installing dependencies"
    - npm install      # or 'yarn install' if you're using Yarn
    - echo "Build completed"  # Here, you could run your build command if necessary (e.g., npm run build)
    - mkdir -p .vercel/output   # This folder will contain the build output
    - cp -r ./build/* .vercel/output   # Copy the built files to the Vercel output folder

# Deploy to preview environment (for non-main branches or MR)
deploy_preview:
  stage: deploy_preview
  except:
    - main   # Skip this job on the main branch
  script:
    - npm install --global vercel   # Install Vercel CLI
    - vercel pull --yes --environment=preview --token=$VERCEL_TOKEN   # Sync with Vercel project in preview mode
    - vercel build --token=$VERCEL_TOKEN    # Build the project locally (you may skip if it's prebuilt)
    - vercel deploy --prebuilt --token=$VERCEL_TOKEN   # Deploy the prebuilt output to Vercel

# Deploy to production (only for the main branch)
deploy_production:
  stage: deploy_production
  only:
    - main   # Only deploy when changes are merged into the main branch
  script:
    - npm install --global vercel   # Install Vercel CLI
    - vercel pull --yes --environment=production --token=$VERCEL_TOKEN  # Sync with Vercel project in production mode
    - vercel build --prod --token=$VERCEL_TOKEN  # Build the project for production
    - vercel deploy --prebuilt --prod --token=$VERCEL_TOKEN  # Deploy to production using prebuilt artifacts
